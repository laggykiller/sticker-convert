name: Build

on:
  push:
    tags:
      - 'v*'

jobs:

  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        submodules: recursive
    - name: Create Release
      uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        token: "${{ secrets.GITHUB_TOKEN }}"
        name: Release ${{ github.ref_name }}
  
  build-wheel:
    name: Build wheel
    needs: createrelease
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build SDist and wheel
        run: pipx run build
      
      - name: Test SDist
        run: pip install dist/*.tar.gz

      - uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/*

  build-binary-windows:
    name: Build packages (Windows)
    needs: createrelease
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: windows-2022
            TARGET: windows-x86_64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        allow-prereleases: true
    - name: Build for ${{matrix.TARGET}}
      run: |
        echo "STICKER_CONVERT_VERSION=$(cd src; python -c 'from sticker_convert.version import __version__; print(__version__)'; cd ..)" >> $env:GITHUB_ENV
        python compile.py
        move sticker-convert.dist sticker-convert
        Compress-Archive -Path sticker-convert -DestinationPath sticker-convert-${{matrix.TARGET}}.zip
        
        dotnet tool install --global wix --version 4.0.4
        wix extension add WixToolset.UI.wixext/4.0.4
        python .\msicreator\createmsi.py msicreator.json
        move *.msi sticker-convert-${{matrix.TARGET}}.msi
    - name: Upload unsigned artifact
      id: upload-unsigned-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.TARGET}}-unsigned
        if-no-files-found: error
        path: |
          ./sticker-convert-${{matrix.TARGET}}.zip
          ./sticker-convert-${{matrix.TARGET}}.msi
    - name: Sign
      uses: signpath/github-action-submit-signing-request@v1.1
      env:
        # select release-signing policy for main and release branches
        SIGNPATH_SIGNING_POLICY_SLUG: ${{ startsWith(github.ref, 'refs/tags/v') && 'release-signing' || 'test-signing' }}
      with:
        api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
        organization-id: '${{ vars.SIGNPATH_ORGANIZATION_ID }}'
        project-slug: 'sticker-convert'
        signing-policy-slug:  '${{ env.SIGNPATH_SIGNING_POLICY_SLUG }}'
        github-artifact-id:  "${{steps.upload-unsigned-artifact.outputs.artifact-id}}"
        wait-for-completion: true
        wait-for-completion-timeout-in-seconds: 18000
        output-artifact-directory: ${{matrix.TARGET}}-signed
        parameters: |
          version: "${{ env.STICKER_CONVERT_VERSION }}"
    - name: Upload signed artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.TARGET}}-signed
        if-no-files-found: error
        path:  |
          ./${{matrix.TARGET}}-signed/sticker-convert-${{matrix.TARGET}}.zip
          ./${{matrix.TARGET}}-signed/sticker-convert-${{matrix.TARGET}}.msi
    - name: Upload Release Asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          ./${{matrix.TARGET}}-signed/sticker-convert-${{matrix.TARGET}}.zip
          ./${{matrix.TARGET}}-signed/sticker-convert-${{matrix.TARGET}}.msi

  build-binary-macos:
    name: Build packages (macOS)
    needs: createrelease
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: macos-13
            TARGET: macos-x86_64
          - os: macos-14
            TARGET: macos-arm64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        allow-prereleases: true
    - name: Build for ${{matrix.TARGET}}
      run: |
        python ./compile.py
        cp ./scripts/hold_control_and_click_open_me_first.command ./
        zip -r9 sticker-convert-${{matrix.TARGET}}.zip sticker-convert.app hold_control_and_click_open_me_first.command
    - name: Upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.TARGET}}
        if-no-files-found: error
        path: sticker-convert-${{matrix.TARGET}}.zip
    - name: Upload Release Asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: sticker-convert-${{matrix.TARGET}}.zip

  build-binary-linux:
    name: Build packages (Linux)
    needs: createrelease
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            TARGET: linux-x86_64
            ARCH: amd64
          - os: ubuntu-24.04-arm
            TARGET: linux-aarch64
            ARCH: arm64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Build for ${{matrix.TARGET}}
      run: |
        docker build \
          -t nuitka_build_${{matrix.ARCH}} \
          -f ./scripts/nuitka_build_${{matrix.ARCH}}.dockerfile \
          --platform linux/${{matrix.ARCH}} \
          ./
        docker run \
          --rm \
          -v $(pwd):/${GITHUB_WORKSPACE} \
          -w ${GITHUB_WORKSPACE} \
          --platform linux/${{matrix.ARCH}} \
          nuitka_build_${{matrix.ARCH}} \
          python ./compile.py
        mv ./sticker-convert.dist ./sticker-convert-${{matrix.TARGET}}
        zip -r9 sticker-convert-${{matrix.TARGET}}.zip ./sticker-convert-${{matrix.TARGET}}
    - name: Upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.TARGET}}
        if-no-files-found: error
        path: sticker-convert-${{matrix.TARGET}}.zip
    - name: Upload Release Asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ./sticker-convert-${{matrix.TARGET}}.zip

  build-appimage:
    name: Build appimage
    runs-on: ubuntu-latest
    needs: build-binary-linux
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - arch: x86_64
          - arch: aarch64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/download-artifact@v4
      with:
        name: linux-${{matrix.arch}}
    - name: Build appiamge for ${{matrix.arch}}
      run: |
        sudo add-apt-repository universe
        sudo apt install -y libfuse2
        unzip sticker-convert-linux-${{matrix.arch}}.zip
        mv sticker-convert-linux-${{matrix.arch}} ./sticker-convert.dist
        SC_COMPILE_ARCH=${{matrix.arch}} ./scripts/build_appimage.sh
    - name: Upload artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{matrix.arch}}-appimage
        if-no-files-found: error
        path: sticker-convert-${{matrix.arch}}.AppImage
    - name: Upload Release Asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ./sticker-convert-${{matrix.arch}}.AppImage

  build-docker:
    name: Build Docker image and push
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker (min-cli)
        id: meta_min_cli
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          flavor: |
            suffix=-min-cli,onlatest=true
      
      - name: Extract metadata (tags, labels) for Docker (min-gui)
        id: meta_min_gui
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
          flavor: |
            suffix=-min-gui,onlatest=true
      
      - name: Extract metadata (tags, labels) for Docker (full)
        id: meta_full
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ github.repository }}
            ghcr.io/${{ github.repository }}
    
      - name: Build and push Docker image (min-cli)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta_min_cli.outputs.tags }}
          labels: ${{ steps.meta_min_cli.outputs.labels }}
          target: min-cli
      
      - name: Build and push Docker image (min-gui)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta_min_gui.outputs.tags }}
          labels: ${{ steps.meta_min_gui.outputs.labels }}
          target: min-gui

      - name: Build and push Docker image (full)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta_full.outputs.tags }}
          labels: ${{ steps.meta_full.outputs.labels }}
          target: full
  
  upload-pypi:
    name: Upload to pypi
    needs: [build-wheel, build-binary-windows, build-binary-macos, build-appimage]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}